{%- set file_name = "weaver_cli_generated.py" -%}
{{- template.set_file_name(file_name) -}}
#!/usr/bin/env python3
"""
Generated Weaver CLI implementation from semantic conventions.

This implements the 80/20 Weaver commands based on semantic definitions.
"""

import typer
from pathlib import Path
from typing import Optional, List, Dict
from rich.console import Console
from rich.table import Table
from rich import print as rprint
from opentelemetry import trace
import sys
import json
import yaml
import time

# Add runtime to path
sys.path.append("output")
from runtime.forge import (
    weaver_registry_check,
    weaver_registry_generate,
    weaver_registry_resolve,
    weaver_registry_stats,
)

app = typer.Typer(
    name="weaver",
    help="🌟 Generated Weaver CLI with 80/20 commands",
    no_args_is_help=True
)

console = Console()
tracer = trace.get_tracer("weaver.cli")

# Generated commands from semantic conventions
{% for operation in ctx %}
{% if operation.id.startswith("weaver.registry.") %}
{% set cmd_name = operation.id.split('.')[-1] %}
{% set required_attrs = operation.attributes | selectattr("requirement_level", "equalto", "required") | list %}
{% set optional_attrs = operation.attributes | rejectattr("requirement_level", "equalto", "required") | list %}

@app.command()
def {{ cmd_name }}(
    {%- for attr in required_attrs %}
    {%- if not attr.id.endswith((".count", ".valid", ".errors")) %}
    {{ attr.id.split('.')[-1] }}: {% if attr.type == "string" %}str{% elif attr.type == "boolean" %}bool{% elif attr.type == "int" %}int{% elif attr.type == "string[]" %}List[str]{% elif attr.type == "template[string]" %}Dict[str, str]{% else %}str{% endif %} = typer.Argument(
        ...,
        help="{{ attr.brief }}"
    ),
    {%- endif %}
    {%- endfor %}
    {%- for attr in optional_attrs %}
    {%- if not attr.id.endswith((".count", ".valid", ".errors", ".files")) %}
    {{ attr.id.split('.')[-1] }}: Optional[{% if attr.type == "string" %}str{% elif attr.type == "boolean" %}bool{% elif attr.type == "int" %}int{% elif attr.type == "string[]" %}List[str]{% elif attr.type == "template[string]" %}Dict[str, str]{% else %}str{% endif %}] = typer.Option(
        {% if attr.type == "boolean" %}False{% elif attr.type == "string[]" %}None{% else %}None{% endif %},
        "--{{ attr.id.split('.')[-1] | replace('_', '-') }}",
        help="{{ attr.brief }}"
    ),
    {%- endif %}
    {%- endfor %}
) -> None:
    """{{ operation.brief }}"""
    
    with tracer.start_span("{{ operation.id }}") as span:
        # Set span attributes
        {% for attr in operation.attributes %}
        {%- if not attr.id.endswith((".count", ".valid", ".errors", ".files")) %}
        {%- set var_name = attr.id.split('.')[-1] %}
        {% if attr.requirement_level == "required" or attr.requirement_level == "recommended" %}
        {% if attr.type == "string[]" %}
        if {{ var_name }}:
            span.set_attribute("{{ attr.id }}", {{ var_name }})
        {% else %}
        span.set_attribute("{{ attr.id }}", {{ var_name }})
        {% endif %}
        {% endif %}
        {%- endif %}
        {% endfor %}
        
        try:
            {% if cmd_name == "check" %}
            # Registry check implementation
            is_valid, errors = weaver_registry_check(path)
            
            span.set_attribute("{{ operation.id }}.valid", is_valid)
            if errors:
                span.set_attribute("{{ operation.id }}.errors", errors)
            
            if is_valid:
                rprint("[green]✅ Registry is valid[/green]")
            else:
                rprint("[red]❌ Registry validation failed:[/red]")
                for error in errors or []:
                    rprint(f"  • {error}")
                raise typer.Exit(1)
                
            {% elif cmd_name == "generate" %}
            # Registry generate implementation
            params_dict = {}
            if params:
                # params is template[string] type - convert to dict
                params_dict = params
            
            files = weaver_registry_generate(
                registry_path=registry_path,
                target_name=target,
                template_path=template_path or "templates",
                output_dir=output_dir,
                params=params_dict
            )
            
            span.set_attribute("{{ operation.id }}.files_count", len(files))
            if files:
                span.set_attribute("{{ operation.id }}.files", files[:10])  # First 10
            
            rprint(f"[green]✅ Generated {len(files)} files[/green]")
            for f in files[:5]:
                rprint(f"  • {f}")
            if len(files) > 5:
                rprint(f"  ... and {len(files)-5} more")
                
            {% elif cmd_name == "resolve" %}
            # Registry resolve implementation
            resolved = weaver_registry_resolve(
                registry_path=registry_path,
                output_path=output_path,
                format=format or "yaml"
            )
            
            groups_count = len(resolved.get("groups", []))
            span.set_attribute("{{ operation.id }}.groups_count", groups_count)
            
            if not output_path:
                if format == "json":
                    rprint(json.dumps(resolved, indent=2))
                else:
                    rprint(yaml.dump(resolved, default_flow_style=False))
            else:
                rprint(f"[green]✅ Resolved registry written to {output_path}[/green]")
                
            {% elif cmd_name == "stats" %}
            # Registry stats implementation
            stats = weaver_registry_stats(registry_path)
            
            # Extract key stats
            total_groups = int(stats.get("Total groups", 0))
            total_attributes = int(stats.get("Total attributes", 0))
            
            span.set_attribute("{{ operation.id }}.total_groups", total_groups)
            span.set_attribute("{{ operation.id }}.total_attributes", total_attributes)
            
            table = Table(title="Registry Statistics")
            table.add_column("Metric", style="cyan")
            table.add_column("Value", style="green")
            
            for key, value in stats.items():
                table.add_row(key, str(value))
            
            console.print(table)
            {% else %}
            # Not implemented yet
            rprint(f"[yellow]Command '{{ cmd_name }}' not fully implemented yet[/yellow]")
            {% endif %}
            
        except Exception as e:
            span.record_exception(e)
            span.set_status(trace.Status(trace.StatusCode.ERROR))
            rprint(f"[red]Error: {e}[/red]")
            raise typer.Exit(1)

{% endif %}
{% endfor %}

# Multi-command operations
{% for operation in ctx %}
{% if operation.id == "weaver.multi.generate" %}
@app.command()
def multi_generate(
    registry_path: str = typer.Argument(..., help="Path to the registry"),
    languages: List[str] = typer.Option(
        ["python", "go", "rust"],
        "--language", "-l",
        help="Target languages"
    ),
    parallel: bool = typer.Option(
        True,
        "--parallel/--sequential",
        help="Generate in parallel"
    ),
) -> None:
    """{{ operation.brief }}"""
    
    with tracer.start_span("{{ operation.id }}") as span:
        span.set_attribute("multi.generate.registry_path", registry_path)
        span.set_attribute("multi.generate.languages", languages)
        span.set_attribute("multi.generate.parallel", parallel)
        
        start_time = time.time()
        total_files = 0
        
        try:
            import concurrent.futures
            
            def generate_for_lang(lang):
                return weaver_registry_generate(
                    registry_path=registry_path,
                    target_name=lang,
                    template_path="templates",
                    output_dir=f"generated/{lang}"
                )
            
            if parallel:
                with concurrent.futures.ThreadPoolExecutor() as executor:
                    futures = {executor.submit(generate_for_lang, lang): lang 
                              for lang in languages}
                    
                    for future in concurrent.futures.as_completed(futures):
                        lang = futures[future]
                        try:
                            files = future.result()
                            total_files += len(files)
                            rprint(f"[green]✓ {lang}: {len(files)} files[/green]")
                        except Exception as e:
                            rprint(f"[red]✗ {lang}: {e}[/red]")
            else:
                for lang in languages:
                    try:
                        files = generate_for_lang(lang)
                        total_files += len(files)
                        rprint(f"[green]✓ {lang}: {len(files)} files[/green]")
                    except Exception as e:
                        rprint(f"[red]✗ {lang}: {e}[/red]")
            
            duration_ms = int((time.time() - start_time) * 1000)
            span.set_attribute("multi.generate.total_files", total_files)
            span.set_attribute("multi.generate.duration_ms", duration_ms)
            
            rprint(f"\n[bold green]✨ Generated {total_files} files in {duration_ms}ms[/bold green]")
            
        except Exception as e:
            span.record_exception(e)
            span.set_status(trace.Status(trace.StatusCode.ERROR))
            rprint(f"[red]Error: {e}[/red]")
            raise typer.Exit(1)
{% endif %}
{% endfor %}

# Quick command for 80% use case
@app.command()
def quick(
    registry_path: str = typer.Argument(..., help="Registry path")
) -> None:
    """⚡ Quick check + generate Python (80% use case)."""
    
    with tracer.start_span("weaver.quick") as span:
        span.set_attribute("registry_path", registry_path)
        
        # Check
        ctx = typer.Context()
        ctx.invoke(check, path=registry_path)
        
        # Generate
        ctx.invoke(generate, 
                  registry_path=registry_path,
                  target="python",
                  output_dir="quick_output")
        
        rprint("[bold green]✨ Quick workflow complete![/bold green]")

if __name__ == "__main__":
    app()