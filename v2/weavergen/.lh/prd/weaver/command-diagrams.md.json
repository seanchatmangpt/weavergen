{
    "sourceFile": "prd/weaver/command-diagrams.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1751482968414,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1751482968414,
            "name": "Commit-0",
            "content": "# Weaver Command Diagrams\n\nThis document contains Mermaid diagrams for each Weaver command, showing their workflows, user interactions, and system components.\n\n## 1. Version Command\n\n```mermaid\nflowchart TD\n    A[User: weavergen weaver version] --> B[CLI: Parse command]\n    B --> C[WeaverIntegration: get_weaver_version]\n    C --> D[Subprocess: weaver --version]\n    D --> E{Weaver Binary Available?}\n    E -->|Yes| F[Return version string]\n    E -->|No| G[Error: Weaver not found]\n    F --> H[Display: Weaver version: X.X.X]\n    G --> I[Error: Install with cargo install weaver-forge]\n    H --> J[OpenTelemetry: Record span]\n    I --> J\n    J --> K[End]\n```\n\n## 2. Init Command\n\n```mermaid\nflowchart TD\n    A[User: weavergen weaver init <name>] --> B[CLI: Parse arguments]\n    B --> C[Create output directory]\n    C --> D[Generate registry manifest]\n    D --> E[Create model directory]\n    E --> F{With examples?}\n    F -->|Yes| G[Generate example semantic conventions]\n    F -->|No| H[Skip example generation]\n    G --> I[WeaverIntegration: check_registry]\n    H --> I\n    I --> J[Subprocess: weaver registry check]\n    J --> K{Registry valid?}\n    K -->|Yes| L[Display: Registry validation passed]\n    K -->|No| M[Display: Validation warnings]\n    L --> N[WeaverIntegration: get_registry_stats]\n    M --> N\n    N --> O[Display: Registry statistics]\n    O --> P[Display: Success message]\n    P --> Q[OpenTelemetry: Record span]\n    Q --> R[End]\n```\n\n## 3. Check Command\n\n```mermaid\nflowchart TD\n    A[User: weavergen weaver check <registry>] --> B[CLI: Parse arguments]\n    B --> C[Configure validation mode]\n    C --> D[WeaverIntegration: check_registry]\n    D --> E[Subprocess: weaver registry check]\n    E --> F{Validation successful?}\n    F -->|Yes| G[Display: ✓ Registry validation passed]\n    F -->|No| H[Parse error output]\n    G --> I{Show warnings?}\n    H --> J[Display: ✗ Validation errors found]\n    I -->|Yes| K[Display warnings]\n    I -->|No| L[Skip warnings]\n    J --> M[Display error details]\n    K --> N[WeaverIntegration: get_registry_stats]\n    L --> N\n    M --> N\n    N --> O[Display registry statistics]\n    O --> P[OpenTelemetry: Record span]\n    P --> Q[End]\n```\n\n## 4. Stats Command\n\n```mermaid\nflowchart TD\n    A[User: weavergen weaver stats <registry>] --> B[CLI: Parse arguments]\n    B --> C[WeaverIntegration: get_registry_stats]\n    C --> D[Subprocess: weaver registry stats]\n    D --> E{Stats successful?}\n    E -->|Yes| F[Parse JSON output]\n    E -->|No| G[Error: Failed to get stats]\n    F --> H{JSON output requested?}\n    G --> I[Display error message]\n    H -->|Yes| J[Output JSON format]\n    H -->|No| K[Display pretty format]\n    J --> L[Show: groups, attributes, metrics, spans, resources]\n    K --> L\n    I --> M[Exit with error]\n    L --> N[Display detailed statistics]\n    N --> O[OpenTelemetry: Record span]\n    O --> P[End]\n```\n\n## 5. Resolve Command\n\n```mermaid\nflowchart TD\n    A[User: weavergen weaver resolve <registry>] --> B[CLI: Parse arguments]\n    B --> C[WeaverIntegration: resolve_registry]\n    C --> D[Subprocess: weaver registry resolve]\n    D --> E{Resolve successful?}\n    E -->|Yes| F[Get resolved file path]\n    E -->|No| G[Error: Resolve failed]\n    F --> H[Display: ✓ Registry resolved successfully]\n    G --> I[Display error message]\n    H --> J[Display: 📁 Resolved file path]\n    I --> K[Exit with error]\n    J --> L[Calculate file size]\n    L --> M[Display: 📏 File size]\n    M --> N[OpenTelemetry: Record span]\n    N --> O[End]\n```\n\n## 6. Generate Command\n\n```mermaid\nflowchart TD\n    A[User: weavergen weaver generate <registry>] --> B[CLI: Parse arguments]\n    B --> C[Map target to WeaverTarget enum]\n    C --> D{Target supported?}\n    D -->|No| E[Error: Unsupported target]\n    D -->|Yes| F[Parse template parameters]\n    E --> G[Display supported targets]\n    F --> H[Configure Weaver settings]\n    G --> I[Exit with error]\n    H --> I[Progress: Validating registry]\n    I --> J[WeaverIntegration: check_registry]\n    J --> K{Validation successful?}\n    K -->|No| L[Error: Validation failed]\n    K -->|Yes| M[Progress: Generating code]\n    L --> N[Display validation errors]\n    M --> O[WeaverIntegration: generate_code]\n    N --> P[Exit with error]\n    O --> Q[Subprocess: weaver registry generate]\n    Q --> R{Generation successful?}\n    R -->|Yes| S[Display: ✓ Generated code]\n    R -->|No| T[Error: Generation failed]\n    S --> U[List generated files]\n    T --> V[Display error details]\n    U --> W[Display diagnostics]\n    V --> X[Exit with error]\n    W --> Y[OpenTelemetry: Record span]\n    Y --> Z[End]\n```\n\n## 7. Targets Command\n\n```mermaid\nflowchart TD\n    A[User: weavergen weaver targets] --> B[CLI: Parse command]\n    B --> C[WeaverIntegration: get_available_targets]\n    C --> D[Get list of WeaverTarget enums]\n    D --> E[Create table structure]\n    E --> F[Format target descriptions]\n    F --> G[Display: Available Weaver Targets]\n    G --> H[Show target table]\n    H --> I[Get Weaver version]\n    I --> J[Display: Weaver version]\n    J --> K[OpenTelemetry: Record span]\n    K --> L[End]\n```\n\n## System Architecture Overview\n\n```mermaid\ngraph TB\n    subgraph \"User Interface\"\n        A[weavergen CLI]\n        B[Rich Console]\n        C[Progress Indicators]\n    end\n    \n    subgraph \"WeaverGen Integration\"\n        D[WeaverIntegration Class]\n        E[OpenTelemetry Spans]\n        F[Error Handling]\n    end\n    \n    subgraph \"External Systems\"\n        G[Weaver Binary]\n        H[File System]\n        I[Registry Files]\n    end\n    \n    A --> D\n    B --> A\n    C --> A\n    D --> G\n    D --> H\n    D --> E\n    D --> F\n    G --> I\n    H --> I\n```\n\n## Error Handling Flow\n\n```mermaid\nflowchart TD\n    A[Command Execution] --> B{Weaver Binary Available?}\n    B -->|No| C[Installation Error]\n    B -->|Yes| D[Execute Weaver Command]\n    C --> E[Display: Install with cargo install weaver-forge]\n    D --> F{Command Successful?}\n    F -->|Yes| G[Parse Success Output]\n    F -->|No| H[Parse Error Output]\n    G --> I[Display Success Message]\n    H --> J[Parse Error Details]\n    I --> K[Record Success Span]\n    J --> L[Display Error Message]\n    K --> M[End Successfully]\n    L --> N[Record Error Span]\n    N --> O[Exit with Error Code]\n```\n\n## OpenTelemetry Instrumentation\n\n```mermaid\nflowchart TD\n    A[Command Start] --> B[Create Root Span]\n    B --> C[Set Span Attributes]\n    C --> D[Execute Weaver Command]\n    D --> E{Command Result}\n    E -->|Success| F[Set Status: OK]\n    E -->|Error| G[Set Status: ERROR]\n    F --> H[Add Success Events]\n    G --> I[Record Exception]\n    H --> J[Set Span Duration]\n    I --> J\n    J --> K[End Span]\n    K --> L[Export to Console]\n```\n\n## Registry Validation Flow\n\n```mermaid\nflowchart TD\n    A[Registry Path] --> B[Validate Path Exists]\n    B --> C[Check Registry Manifest]\n    C --> D[Parse YAML Structure]\n    D --> E{Manifest Valid?}\n    E -->|No| F[Report Manifest Errors]\n    E -->|Yes| G[Load Semantic Conventions]\n    F --> H[Exit with Error]\n    G --> I[Validate Convention Files]\n    I --> J{Conventions Valid?}\n    J -->|No| K[Report Convention Errors]\n    J -->|Yes| L[Run Weaver Validation]\n    K --> M[Exit with Error]\n    L --> N{Weaver Validation Passed?}\n    N -->|No| O[Report Weaver Errors]\n    N -->|Yes| P[Registry Valid]\n    O --> Q[Exit with Error]\n    P --> R[Success]\n```\n\n## Code Generation Flow\n\n```mermaid\nflowchart TD\n    A[Registry Input] --> B[Validate Registry]\n    B --> C{Registry Valid?}\n    C -->|No| D[Validation Error]\n    C -->|Yes| E[Select Target Language]\n    D --> M[Exit with Error]\n    E --> F[Configure Templates]\n    F --> G[Set Generation Parameters]\n    G --> H[Execute Weaver Generate]\n    H --> I{Generation Successful?}\n    I -->|No| J[Generation Error]\n    I -->|Yes| K[Collect Generated Files]\n    J --> L[Display Error Details]\n    K --> N[List Generated Files]\n    L --> M\n    N --> O[Display Statistics]\n    O --> P[Success]\n```\n\n## Performance Monitoring\n\n```mermaid\nflowchart TD\n    A[Command Start] --> B[Start Timer]\n    B --> C[Execute Command]\n    C --> D[End Timer]\n    D --> E[Calculate Duration]\n    E --> F{Within Limits?}\n    F -->|Yes| G[Record Normal Performance]\n    F -->|No| H[Record Performance Warning]\n    G --> I[Continue Execution]\n    H --> I\n    I --> J[Log Performance Metrics]\n    J --> K[End]\n```\n\nThese diagrams provide a comprehensive view of how each Weaver command operates, their error handling strategies, and their integration with the broader WeaverGen ecosystem. "
        }
    ]
}