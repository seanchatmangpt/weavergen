{
    "sourceFile": "prd/weaver/sequence-diagrams.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1751483038494,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1751483038494,
            "name": "Commit-0",
            "content": "# Weaver Command Sequence Diagrams\n\nThis document contains sequence diagrams showing the interaction flows between different components for each Weaver command.\n\n## 1. Version Command Sequence\n\n```mermaid\nsequenceDiagram\n    participant U as User\n    participant CLI as weavergen CLI\n    participant WI as WeaverIntegration\n    participant WB as Weaver Binary\n    participant OT as OpenTelemetry\n\n    U->>CLI: weavergen weaver version\n    CLI->>OT: Create span \"weaver.version\"\n    CLI->>WI: get_weaver_version()\n    WI->>WB: weaver --version\n    WB-->>WI: version string or error\n    alt Success\n        WI-->>CLI: \"Weaver version: X.X.X\"\n        CLI->>OT: Set status OK\n    else Error\n        WI-->>CLI: \"Error: Weaver not found\"\n        CLI->>OT: Set status ERROR\n    end\n    CLI->>OT: End span\n    CLI-->>U: Display result\n```\n\n## 2. Init Command Sequence\n\n```mermaid\nsequenceDiagram\n    participant U as User\n    participant CLI as weavergen CLI\n    participant FS as File System\n    participant WI as WeaverIntegration\n    participant WB as Weaver Binary\n    participant OT as OpenTelemetry\n\n    U->>CLI: weavergen weaver init <name>\n    CLI->>OT: Create span \"weaver.init\"\n    CLI->>FS: Create output directory\n    CLI->>FS: Generate registry manifest\n    CLI->>FS: Create model directory\n    alt With examples\n        CLI->>FS: Generate example conventions\n    end\n    CLI->>WI: check_registry(registry_path)\n    WI->>WB: weaver registry check\n    WB-->>WI: validation result\n    WI-->>CLI: validation status\n    CLI->>WI: get_registry_stats(registry_path)\n    WI->>WB: weaver registry stats\n    WB-->>WI: statistics JSON\n    WI-->>CLI: parsed statistics\n    CLI->>OT: Set status OK\n    CLI->>OT: End span\n    CLI-->>U: Display success message\n```\n\n## 3. Check Command Sequence\n\n```mermaid\nsequenceDiagram\n    participant U as User\n    participant CLI as weavergen CLI\n    participant WI as WeaverIntegration\n    participant WB as Weaver Binary\n    participant OT as OpenTelemetry\n\n    U->>CLI: weavergen weaver check <registry>\n    CLI->>OT: Create span \"weaver.check\"\n    CLI->>WI: check_registry(registry_path, strict_mode)\n    WI->>WB: weaver registry check\n    WB-->>WI: validation output\n    alt Validation Success\n        WI-->>CLI: success status\n        CLI->>OT: Set status OK\n        CLI-->>U: ✓ Registry validation passed\n    else Validation Failed\n        WI-->>CLI: error details\n        CLI->>OT: Set status ERROR\n        CLI-->>U: ✗ Validation errors found\n    end\n    CLI->>WI: get_registry_stats(registry_path)\n    WI->>WB: weaver registry stats\n    WB-->>WI: statistics\n    WI-->>CLI: parsed stats\n    CLI->>OT: End span\n    CLI-->>U: Display statistics\n```\n\n## 4. Stats Command Sequence\n\n```mermaid\nsequenceDiagram\n    participant U as User\n    participant CLI as weavergen CLI\n    participant WI as WeaverIntegration\n    participant WB as Weaver Binary\n    participant OT as OpenTelemetry\n\n    U->>CLI: weavergen weaver stats <registry>\n    CLI->>OT: Create span \"weaver.stats\"\n    CLI->>WI: get_registry_stats(registry_path)\n    WI->>WB: weaver registry stats\n    WB-->>WI: JSON statistics or error\n    alt Success\n        WI-->>CLI: parsed statistics\n        CLI->>OT: Set status OK\n        alt JSON output requested\n            CLI-->>U: Output JSON format\n        else Pretty format\n            CLI-->>U: Display formatted table\n        end\n    else Error\n        WI-->>CLI: error message\n        CLI->>OT: Set status ERROR\n        CLI-->>U: Error: Failed to get stats\n    end\n    CLI->>OT: End span\n```\n\n## 5. Resolve Command Sequence\n\n```mermaid\nsequenceDiagram\n    participant U as User\n    participant CLI as weavergen CLI\n    participant WI as WeaverIntegration\n    participant WB as Weaver Binary\n    participant FS as File System\n    participant OT as OpenTelemetry\n\n    U->>CLI: weavergen weaver resolve <registry>\n    CLI->>OT: Create span \"weaver.resolve\"\n    CLI->>WI: resolve_registry(registry_path)\n    WI->>WB: weaver registry resolve\n    WB-->>WI: resolved file path or error\n    alt Success\n        WI-->>CLI: resolved path\n        CLI->>FS: Get file size\n        FS-->>CLI: file size\n        CLI->>OT: Set status OK\n        CLI-->>U: ✓ Registry resolved successfully\n        CLI-->>U: 📁 Resolved file path\n        CLI-->>U: 📏 File size\n    else Error\n        WI-->>CLI: error message\n        CLI->>OT: Set status ERROR\n        CLI-->>U: Error: Resolve failed\n    end\n    CLI->>OT: End span\n```\n\n## 6. Generate Command Sequence\n\n```mermaid\nsequenceDiagram\n    participant U as User\n    participant CLI as weavergen CLI\n    participant WI as WeaverIntegration\n    participant WB as Weaver Binary\n    participant OT as OpenTelemetry\n\n    U->>CLI: weavergen weaver generate <registry>\n    CLI->>OT: Create span \"weaver.generate\"\n    CLI->>CLI: Map target to WeaverTarget enum\n    alt Target supported\n        CLI->>CLI: Configure generation parameters\n        CLI->>U: Progress: Validating registry\n        CLI->>WI: check_registry(registry_path)\n        WI->>WB: weaver registry check\n        WB-->>WI: validation result\n        alt Validation successful\n            WI-->>CLI: validation passed\n            CLI->>U: Progress: Generating code\n            CLI->>WI: generate_code(registry_path, target, params)\n            WI->>WB: weaver registry generate\n            WB-->>WI: generation result\n            alt Generation successful\n                WI-->>CLI: generated files list\n                CLI->>OT: Set status OK\n                CLI-->>U: ✓ Generated code\n                CLI-->>U: List generated files\n            else Generation failed\n                WI-->>CLI: error details\n                CLI->>OT: Set status ERROR\n                CLI-->>U: Error: Generation failed\n            end\n        else Validation failed\n            WI-->>CLI: validation errors\n            CLI->>OT: Set status ERROR\n            CLI-->>U: Error: Validation failed\n        end\n    else Target not supported\n        CLI->>OT: Set status ERROR\n        CLI-->>U: Error: Unsupported target\n    end\n    CLI->>OT: End span\n```\n\n## 7. Targets Command Sequence\n\n```mermaid\nsequenceDiagram\n    participant U as User\n    participant CLI as weavergen CLI\n    participant WI as WeaverIntegration\n    participant WB as Weaver Binary\n    participant OT as OpenTelemetry\n\n    U->>CLI: weavergen weaver targets\n    CLI->>OT: Create span \"weaver.targets\"\n    CLI->>WI: get_available_targets()\n    WI-->>CLI: list of WeaverTarget enums\n    CLI->>CLI: Create target table\n    CLI->>WI: get_weaver_version()\n    WI->>WB: weaver --version\n    WB-->>WI: version string\n    WI-->>CLI: version\n    CLI->>OT: Set status OK\n    CLI->>OT: End span\n    CLI-->>U: Display target table\n    CLI-->>U: Display Weaver version\n```\n\n## Error Handling Sequence\n\n```mermaid\nsequenceDiagram\n    participant U as User\n    participant CLI as weavergen CLI\n    participant WI as WeaverIntegration\n    participant WB as Weaver Binary\n    participant OT as OpenTelemetry\n\n    U->>CLI: Command with error\n    CLI->>OT: Create span\n    CLI->>WI: Execute command\n    WI->>WB: weaver command\n    WB-->>WI: Error response\n    WI->>WI: Parse error details\n    WI-->>CLI: Error information\n    CLI->>OT: Set status ERROR\n    CLI->>OT: Record exception\n    CLI->>OT: End span\n    CLI-->>U: Display error message\n    CLI-->>U: Exit with error code\n```\n\n## Performance Monitoring Sequence\n\n```mermaid\nsequenceDiagram\n    participant U as User\n    participant CLI as weavergen CLI\n    participant WI as WeaverIntegration\n    participant WB as Weaver Binary\n    participant OT as OpenTelemetry\n    participant PM as Performance Monitor\n\n    U->>CLI: Command execution\n    CLI->>PM: Start timer\n    CLI->>OT: Create span\n    CLI->>WI: Execute command\n    WI->>WB: weaver command\n    WB-->>WI: Response\n    WI-->>CLI: Result\n    CLI->>PM: End timer\n    PM-->>CLI: Duration\n    CLI->>OT: Set span duration\n    CLI->>OT: End span\n    CLI-->>U: Display result\n```\n\n## Registry Validation Sequence\n\n```mermaid\nsequenceDiagram\n    participant U as User\n    participant CLI as weavergen CLI\n    participant FS as File System\n    participant YAML as YAML Parser\n    participant WI as WeaverIntegration\n    participant WB as Weaver Binary\n    participant OT as OpenTelemetry\n\n    U->>CLI: Check registry command\n    CLI->>OT: Create span \"registry.validation\"\n    CLI->>FS: Check path exists\n    FS-->>CLI: Path status\n    CLI->>FS: Read registry manifest\n    FS-->>CLI: YAML content\n    CLI->>YAML: Parse YAML structure\n    YAML-->>CLI: Parsed manifest\n    alt Manifest valid\n        CLI->>FS: Load semantic conventions\n        FS-->>CLI: Convention files\n        CLI->>WI: check_registry()\n        WI->>WB: weaver registry check\n        WB-->>WI: Validation result\n        WI-->>CLI: Validation status\n        CLI->>OT: Set status based on result\n    else Manifest invalid\n        CLI->>OT: Set status ERROR\n        CLI-->>U: Report manifest errors\n    end\n    CLI->>OT: End span\n    CLI-->>U: Display validation result\n```\n\nThese sequence diagrams provide detailed views of how each component interacts during command execution, showing the flow of data and control between the user interface, WeaverGen integration layer, Weaver binary, and OpenTelemetry instrumentation. "
        }
    ]
}