[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "weavergen"
version = "1.0.0"
description = "Python wrapper for OTel Weaver Forge with Claude Code optimization"
readme = "README.md"
requires-python = ">=3.11"
license = "MIT"
authors = [
    { name = "Sean Chatman", email = "sean@seanchatman.com" },
]
keywords = [
    "opentelemetry",
    "semantic-conventions", 
    "code-generation",
    "observability",
    "weaver",
    "claude-code"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Code Generators",
    "Topic :: System :: Monitoring",
]
dependencies = [
    "typer>=0.9.0",
    "rich>=13.0.0",
    "pydantic>=2.0.0",
    "pydantic-ai>=0.1.0",
    "jinja2>=3.1.0",
    "pyyaml>=6.0",
    "httpx>=0.25.0",
    "opentelemetry-api>=1.20.0",
    "opentelemetry-sdk>=1.20.0",
    "psutil>=5.9.0",
    "spiffworkflow>=1.2.0",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]

llm = [
    "ollama>=0.1.0",
    "openai>=1.0.0",
    "anthropic>=0.20.0",
]

examples = [
    "asyncpg>=0.29.0",
]

otel = [
    "opentelemetry-instrumentation>=0.41b0",
]

all = [
    "weavergen[dev,llm,otel,examples]",
    "icontract>=2.6.0",
]

[project.urls]
Homepage = "https://github.com/seanchatmangpt/weavergen"
Documentation = "https://github.com/seanchatmangpt/weavergen#readme"
Repository = "https://github.com/seanchatmangpt/weavergen.git"
"Bug Tracker" = "https://github.com/seanchatmangpt/weavergen/issues"

[project.scripts]
weavergen = "weavergen.cli:app"
weavergen-debug = "weavergen.cli_debug:app"

[tool.hatch.build.targets.wheel]
packages = ["src/weavergen"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/README.md", 
    "/LICENSE",
    "/run_cli.py",
    "/CLAUDE.md",
]

[tool.ruff]
target-version = "py311"
line-length = 88
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true

[tool.weavergen.validation]
# Span-based validation configuration
span_capture_dir = "captured_spans"
validation_commands = [
    "debug health --deep",
    "debug spans --format table", 
    "debug inspect agents"
]
required_span_types = [
    "semantic_span",
    "resource_span", 
    "layer_span",
    "ai_validation",
    "quine_span"
]
